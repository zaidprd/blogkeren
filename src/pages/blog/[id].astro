---
// Impor klien Sanity
import { client } from "../../lib/sanity.ts";
import PortableText from '../../components/PortableText.astro';

// Impor komponen dan utilitas
import MainLayout from "@/layouts/MainLayout.astro";
import AvatarBlogLarge from "@components/ui/avatars/AvatarBlogLarge.astro";
import CardRelated from "@components/ui/cards/CardRelated.astro";
import Bookmark from "@components/ui/buttons/Bookmark.astro";
import SocialShare from "@components/ui/buttons/SocialShare.astro";
import PostFeedback from "@components/ui/feedback/PostFeedback.astro";
import { Image } from "astro:assets";
import { capitalize, formatDate } from "@utils/utils";
import { SITE } from "@data/constants";

// Definisikan tipe data untuk objek 'post'
type Post = {
  title: string;
  author: string;
  pubDate: string;
  readTime: number;
  body: any;
  mainImage: { url: string; altText: string };
  tags?: string[];
  seoTitle?: string;
  metaDescription?: string;
  socialImage?: { url: string };
};

// Definisikan tipe data untuk artikel terkait
type RelatedPost = {
  title: string;
  slug: string;
  pubDate: string;
  readTime: number;
  author: string;
  cardImage: { url: string; altText: string };
};

// Dapatkan semua slug dari Sanity untuk membuat rute
export async function getStaticPaths() {
  const posts: { slug: string }[] = await client.fetch(`*[_type == "post"]{ "slug": slug.current }`);

  return posts.map((post) => ({
    params: { slug: post.slug },
  }));
}

// Ambil slug dari URL
const { slug } = Astro.params;

// Ambil data artikel lengkap dari Sanity berdasarkan slug
const post: Post | null = await client.fetch(`*[_type == "post" && slug.current == "${slug}"][0]{
  title,
  "author": author->name,
  "pubDate": pubDate,
  "readTime": readTime,
  body,
  "mainImage": mainImage.asset->{url, altText},
  "tags": tags[]->title,
  "seoTitle": seo.seoTitle,
  "metaDescription": seo.metaDescription,
  "socialImage": seo.socialImage.asset->{url},
}`);

// Filter artikel terkait dari Sanity
const relatedPosts: RelatedPost[] = await client.fetch(`*[_type == "post" && slug.current != "${slug}"] | order(pubDate desc)[0...2]{
  "slug": slug.current,
  title,
  pubDate,
  readTime,
  "author": author->name,
  "cardImage": mainImage.asset->{url, altText}
}`);

// Jika post tidak ditemukan, tampilkan halaman 404
if (!post) {
  return Astro.redirect('/404');
}

// Perbarui metadata SEO
const pageTitle: string = post.seoTitle || `${post.title} | ${SITE.title}`;
const metaDescription = post.metaDescription || `Baca ${post.title} di blog ScrewFast`;
const ogTitle = post.seoTitle || `${post.title} | Blog | ${SITE.title}`;
const ogImage = post.socialImage?.url || post.mainImage?.url;

---

<MainLayout
  title={pageTitle}
  customDescription={metaDescription}
  customOgTitle={ogTitle}
  ogImage={ogImage}
  structuredData={{
    "@context": "https://schema.org",
    "@type": "BlogPosting",
    headline: post.title,
    image: post.mainImage.url,
    datePublished: post.pubDate,
    author: {
      "@type": "Person",
      name: post.author,
    },
    publisher: {
      "@type": "Organization",
      name: SITE.title,
      logo: {
        "@type": "ImageObject",
        url: "https://screwfast.uk/favicon.ico",
      },
    },
    mainEntityOfPage: {
      "@type": "WebPage",
      "@id": `https://screwfast.uk/blog/${slug}`,
    },
  }}
>
  <section class="mx-auto max-w-3xl px-4 pt-6 pb-12 sm:px-6 lg:px-8 lg:pt-10">
    <div class="max-w-2xl">
      <div class="mb-6 flex items-center justify-between">
        <div class="flex w-full gap-x-5 sm:items-center sm:gap-x-3">
          <AvatarBlogLarge
    blogEntry={{
      id: slug, // Tambahkan properti 'id'
      collection: "blog", // Tambahkan properti 'collection'
      data: {
        author: post.author,
        cardImage: post.mainImage,
        pubDate: new Date(post.pubDate),
              },
            }}
          />
          <div class="grow">
            <div class="flex items-center justify-between gap-x-2">
              <div>
                <span class="font-bold text-neutral-700 dark:text-neutral-300">
                  {post.author}
                </span>
                <ul class="text-xs text-neutral-500">
                  <li
                    class="relative inline-block pe-6 before:absolute before:end-2 before:top-1/2 before:size-1 before:-translate-y-1/2 before:rounded-full before:bg-neutral-300 last:pe-0 last-of-type:before:hidden dark:text-neutral-400 dark:before:bg-neutral-600"
                  >
                    {formatDate(new Date(post.pubDate))}
                  </li>
                  <li
                    class="relative inline-block pe-6 before:absolute before:end-2 before:top-1/2 before:size-1 before:-translate-y-1/2 before:rounded-full before:bg-neutral-300 last:pe-0 last-of-type:before:hidden dark:text-neutral-400 dark:before:bg-neutral-600"
                  >
                    {post.readTime} min read
                  </li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      </div>
      <h2
        class="mb-3 text-2xl font-bold text-neutral-800 md:text-3xl dark:text-neutral-200"
      >
        {post.title}
      </h2>
      <div class="mb-5 space-y-5 md:mb-8 md:space-y-8 prose dark:prose-invert">
        <PortableText value={post.body} />
      </div>
      <div
        class="mx-auto grid max-w-(--breakpoint-lg) gap-y-5 sm:flex sm:items-center sm:justify-between sm:gap-y-0"
      >
        <div
          class="flex flex-wrap gap-x-2 gap-y-1 sm:flex-nowrap sm:items-center sm:gap-y-0"
        >
          {
            post.tags?.map((tag: string) => (
              <span class="inline-flex items-center gap-x-1.5 rounded-lg bg-neutral-400/30 px-3 py-1.5 text-xs font-medium text-neutral-700 outline-hidden focus:outline-hidden focus-visible:ring-3 focus-visible:outline-hidden dark:bg-neutral-700/60 dark:text-neutral-300">
                {capitalize(tag)}
              </span>
            ))
          }
        </div>
        <div class="flex items-center justify-end gap-x-1.5">
          <Bookmark />
          <div
            class="mx-3 block h-4 border-e border-neutral-400 dark:border-neutral-500"
          ></div>
          <div class="inline-flex">
            <SocialShare pageTitle={post.title} />
          </div>
        </div>
      </div>
    </div>
    <PostFeedback
      title="Was this post helpful?"
      firstChoice="Yes"
      secondChoice="No"
    />
  </section>

  <section class="mx-auto max-w-3xl px-4 py-10 sm:px-6 lg:px-8 lg:py-14">
    <div class="mb-10 max-w-2xl">
      <h2
        class="text-2xl font-bold text-balance text-neutral-800 md:text-4xl md:leading-tight dark:text-neutral-200"
      >
        Related articles
      </h2>
    </div>

    <div class="grid grid-cols-2 gap-6">
      {relatedPosts.map((entry) => <CardRelated blogEntry={{ data: { ...entry, pubDate: new Date(entry.pubDate) } }} />)}
    </div>
  </section>
</MainLayout>